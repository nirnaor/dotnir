set nocompatible              " be iMproved, required
filetype off                  " required
let g:ycm_confirm_extra_conf = 0 




" Pluging ----- {{{
call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-rails'
Plug 'sickill/vim-pasta'
Plug 'sudavid4/mysql-mru.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-fugitive'
Plug 'w0rp/ale'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-sleuth'
Plug 'scrooloose/nerdtree', { 'on': ['NERDTree', 'NERDTreeToggle', 'NERDTreeFocus', 'NERDTreeFind'] }
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
" Plug 'Valloric/YouCompleteMe', { 'do': './install.py'}
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }

Plug 'tpope/vim-surround'
Plug 'rking/ag.vim'
Plug 'mattn/emmet-vim'
" Plug 'benekastah/neomake'
Plug 'sbdchd/neoformat'
Plug 'tpope/vim-unimpaired'
Plug 'vitalk/vim-simple-todo'
Plug 'honza/vim-snippets'
Plug 'gcorne/vim-sass-lint'
Plug 'AndrewRadev/switch.vim'
Plug 'jpo/vim-railscasts-theme'
Plug 'pangloss/vim-javascript'
Plug 'sudavid4/tern_for_vim', {'for': 'javascript', 'do': 'npm i' } " intellijent navigation and refactor for javascript
Plug 'sudavid4/vim-js-goToDeclaration'
Plug 'Shougo/neosnippet.vim'
Plug 'Shougo/neosnippet-snippets'
Plug 'codeindulgence/vim-tig'





call plug#end()
" }}}





let g:deoplete#enable_at_startup = 1


" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif


" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

set nocompatible
filetype plugin on
" runtime macros/matchit.vim

map <C-n> :NERDTreeToggle<CR>
noremap <Leader>gn :NERDTreeFind<cr>
noremap <Leader>bb :Mru<cr>
let NERDTreeShowHidden=1
let g:NERDTreeWinSize = 36

" let b:ale_fixers = ['prettier', 'eslint']
let g:ale_fixers = {
\   'javascript': ['eslint'],
\}


nnoremap <leader>af :ALEFix<cr>


set ruler
set rulerformat=%l,%v

syntax on

vnoremap <C-c> "*y
vnoremap <C-v> "*p
map! <C-E> <esc>A


vnoremap // y/<C-R>"<CR>
set colorcolumn=80

set conceallevel=0

" Search {{{1
set incsearch   " incremental search
set ignorecase  " ignore case when search
set smartcase   " ignore case if search pattern is all lowercase, case-sensitive otherwise
set hlsearch    " highlight search terms
set wrapscan    " wrap around when searching

" Reduce timeout after <ESC> is received. {{{1
set ttimeout
set ttimeoutlen=20
set notimeout
set number
" set nowrap

" Escaped search {{{1
func! EscapeForQuery(text)
  let text = substitute(a:text, '\v(\[|\]|\$|\^)', '\\\1', 'g')
  let text = substitute(text, "'", "''", 'g')
  return text
endfunc
" confirm hazardus command()
function! Confirm(message, command)
  let yesno = confirm(a:message, "&Yes\n&No", 2)
  if (yesno == 1)
    exec a:command
  else
    echo "User aborted"
  end
endfunc


let $opener='open'
func! WebSearch(url)
  let searchterm = input('Search: ', expand("<cword>"))
  if searchterm != ''
    let url = substitute(a:url, "%query%", searchterm, '')
    call Browse(url)
  end
endfunc


func! Browse(url)
  if has('gui_win32')
    call system("start " . a:url)
  else
    call system($opener . " '" . a:url . "' &")
  end
endfunc

noremap <Leader>ff :Ag <c-r>=EscapeForQuery(expand("<cword>"))<cr><cr>
" vnoremap <Leader>ff "9y:Ag '<c-r>=EscapeRegisterForQuery(9)<cr>'<cr>
noremap <Leader>fc :Ag 
noremap <Leader>da Bd2f"x
noremap <Leader>fg :call WebSearch("https://google.com/search?q=%query%")<cr>
noremap <Leader>fo :call WebSearch("http://stackoverflow.com/search?q=%query%")<cr>
vnoremap <Leader>fg "9y:call Browse("https://google.com/search?q=<c-r>9")<cr>
vnoremap <Leader>fo "9y:call Browse("http://stackoverflow.com/search?q=<c-r>9")<cr>


if has('nvim')
    noremap <Leader>vs  :tabnew % <cr> :execute 'terminal cd '.Utilsget_project_root(expand('%:p:h')).'; tig status'<cr> :tabclose <cr>
    noremap <Leader>vd  :tabnew % <cr> :execute 'terminal cd '.Utilsget_project_root(expand('%:p:h')).'; git diff %'<cr> :tabclose <cr>
    noremap <Leader>vh  :tabnew % <cr> :execute 'terminal cd '.Utilsget_project_root(expand('%:p:h')).'; tig %'<cr> :tabclose <cr>
    " noremap <Leader>vh :silent !tig %<cr>:redraw!<cr>
else
    noremap <Leader>vs :execute  '! cd '.Utilsget_project_root(expand('%:p:h')).'; tig status'<cr>
    noremap <Leader>vd :!clear; tmux clear-history; git diff %<cr>
    noremap <Leader>vh :silent !tig %<cr>:redraw!<cr>
endif
noremap <Leader>vrf :call Confirm("Revert current file?", "!git checkout %")<cr>
noremap <Leader>vrp :!git co -p %<cr>
"noremap <Leader>vd :silent !clear; git diff %<cr>:redraw!<cr>
noremap <Leader>vaf :!git add %<cr>
noremap <Leader>vb :Gblame<cr>:redraw!<cr>
noremap <Leader>vc :Gcommit<cr>
noremap <Leader>pf :echo @%<cr>
noremap <Leader>vgb :!git show head~
noremap <Leader>t :tabnext <cr>
noremap <Leader>dd :TernDef <cr> <cr>
autocmd FileType javascript nnoremap <buffer>gd :call GoToDeclaration()<cr>










" autocmd BufWritePost *.js,*.jsx,*.py ALEFix


noremap <Leader>ef :e <C-R>=expand("%:p:h") . $delimiter <cr>
noremap <Leader>et :tabe <C-R>=expand("%:p:h") . $delimiter <cr>
noremap <Leader>rf :read <C-R>=expand("%:p:h") . $delimiter <cr>
noremap <Leader>ew :w<cr>
noremap <Leader>ww :w<cr>
noremap <Leader>wq :wq<cr>
noremap <Leader>wa :wa<cr>
noremap <Leader>c :noh<cr>
noremap <Leader>er :call RevertFile()<cr>
noremap <Leader>e"' :s/"/'/g<cr>
noremap <Leader>e'" :s/'/"/g<cr>
" noremap <Leader>rws :%s/\s\+$//<cr>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> :wincmd h<cr>
" nnoremap ,h <C-W>h


" david
nmap \<tab> <plug>(fzf-maps-n)
xmap \<tab> <plug>(fzf-maps-x)
omap \<tab> <plug>(fzf-maps-o)



let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1
let g:rubycomplete_include_object = 1
let g:rubycomplete_include_objectspace = 1





filetype plugin indent on
set tabstop=4
set shiftwidth=4
set expandtab
imap <C-Return> <CR><CR><C-o>k<Tab>

nnoremap <Up> :bnext<CR>
nnoremap <Down> :bprevious<CR>


" highlight OverLength ctermbg=red ctermfg=white guibg=#592929
" match OverLength /\%81v.\+/

nmap <Leader>b :NERDTreeFind<CR>
let $FZF_DEFAULT_COMMAND = 'ag -l -g ""'
noremap <c-p> :FZF<cr>

"'
set noswapfile
set backspace=indent,eol,start
set nopaste


function! Utilsget_project_root(dirname)
    if a:dirname =~ $DOTFILES.'/config/nvim' && a:dirname !~ $DOTFILES.'/config/nvim/plugged/'
        return $DOTFILES.'/config/nvim'
    endif
    let foundRoot = isdirectory(a:dirname.'/.git') || filereadable(a:dirname.'/package.json')
    if foundRoot
        return a:dirname
    elseif a:dirname == '/'
        return
    else
        " walk to the top of the dir tree
        let l:parentDir = strpart(a:dirname, 0, strridx(a:dirname, '/'))
        if isdirectory(l:parentDir)
            return Utilsget_project_root(l:parentDir)
        endif
    endif
endfunction


" let g:neomake_javascript_enabled_makers = ['eslint']
" let g:neomake_jsx_enabled_makers = ['eslint']
" let g:neomake_scss_enabled_makers = ['sasslint']
" augroup NIRISGREAT
"     au!
"     autocmd BufEnter * let g:neomake_javascript_eslint_exe = Utilsget_project_root(expand('%:p:h')).'/node_modules/.bin/eslint'
"     autocmd! BufWritePost * Neomake
" augroup END

let g:python_host_prog  = '/usr/local/lib/python2.7/'


" http://usevim.com/2016/03/07/linting/
" set statusline+=%#warningmsg#
" set statusline+=%*


map <space> :lnext <CR>

let g:jsdoc_allow_input_prompt = 1
let g:jsdoc_input_description  = 1
let g:jsdoc_additional_descriptions  = 1

au BufRead,BufNewFile *.hamlc set ft=haml


let g:ycm_server_use_vim_stdout = 1
let g:ycm_server_log_level = 'debug'



" Tags
noremap <Leader>, :! ctags -R .  --exclude=.git --exclude=node_modules --exclude=test<cr><cr>



" Paste
nnoremap <F3> :set invpaste paste?<CR>
set pastetoggle=<F3>
set showmode
colors default
set binary
set noeol
set fileformats+=dos


set statusline+=%F

au BufReadPost *.rt set syntax=html


"
let g_tern_map_keys=1
let g:javascript_plugin_jsdoc = 1
"colors railscasts
" set foldmethod=syntax



" Schme
" let base16colorspace=256  " Access colors present in 256 colorspace"

" if has('nvim')
"     if ( $THEME =~ 'base16' )
"         execute "colorscheme ".$THEME
"     else
"         colorscheme base16-chalk
"     endif
" else
"     colorscheme PaperColor
" endif

nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>


" " Abbrevations --- {{{{
" iabbrev 'hireracy' hierarchy
" iabbrev inheritence 'inheritance'
" iabbrev unnecesary unnecessary
" iabbrev 'destory' destroy
" " }}}

nnoremap <leader>' viw<esc>a'<esc>bi'<esc>

vnoremap <leader>v" `><esc>i"<esc>gv `<<esc>i"
" nnoremap H _
nnoremap L $
inoremap jk <esc>
" inoremap <esc> <nop>

" augroup indentation
"     autocmd BufWritePre,BufRead *.html :normal gg=G
" augroup END

onoremap in( :<c-u>normal! f(vi(<cr>
onoremap il( :<c-u>normal! F(vi(<cr>

onoremap in{ :<c-u>normal! f{vi{<cr>
onoremap il{ :<c-u>normal! F{vi{<cr>

augroup markdown
    onoremap ih :<c-u>execute "normal! ?^==\\+$\r:nohlsearch\rkvg_"<cr>
    onoremap ah :<c-u>execute "normal! ?^==\\+$\r:nohlsearch\rg_vk0"<cr>
augroup END

" statusline --- {{{{
set statusline=%f         " Path to the file
set statusline+=%=        " Switch to the right side
set statusline+=%l        " Current line
set statusline+=/         " Separator
set statusline+=%L        " Total lines
" }}}

" Vimscript file settings ---------------------- {{{
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END
" }}}


set foldlevelstart=0
" autocmd BufWritePre *.js Neoformat





" termial stuff
nnoremap <C-B>s :sp v <cr> :terminal <cr>